# Create a secrets.h file for the NodeMCU project
# from a secrets.json and output.json file at the specified path

import json
import os
import sys

# Get the path to the secrets.json file
if len(sys.argv) < 2:
    print("Please specify the path to the secrets.json file")
    sys.exit(1)
    
# Base configuration path: Here final user
# put its WIFI SSID and password and other
# relevant data
config_source_path = sys.argv[1]

# Outputs path: Here is the outputs generated
# by the project (terraform), here we find
# private, public keys, certificates, etc.
outputs_source_path = sys.argv[2]

# This is the path where the secrets.h file
# will be generated
secrets_headers_target_path = sys.argv[3]


# Check if the x.json file exists
# and if it is a json file
def check_json(path):
    if not os.path.exists(path):
        print(f"{path} file does not exist or is not a json file.")
        sys.exit(1)

# Check if the secrets.json file exists
check_json(config_source_path)

# Check if the outputs.json file exists
check_json(outputs_source_path)

# Read the config.json file
with open(config_source_path) as f:
    secrets_config = json.load(f)
    
# Read the outputs.json file
with open(outputs_source_path) as f:
    secrets_outputs = json.load(f)

# Write the secrets.h file

with open(secrets_headers_target_path, "w") as f:
    f.write("// This file is automatically generated by GEN.py from config.json\n")
    f.write("// Do not edit this file directly!!!\n")
    f.write("\n")
    f.write("// This file contain sensitive data. Keep it in a safe place!!\n")
    f.write("// -----------------------------\n")
    f.write("\n")
    f.write("\n")
    f.write("#include <pgmspace.h>\n")
    f.write("#define SECRET\n")
    f.write("\n")
    f.write("/* MQTT Config*/\n")
    f.write(f"#define AWS_IOT_PUBLISH_TOPIC   \"{secrets_outputs['iot_thing_name']['value']}/pub\"\n")
    f.write(f"#define AWS_IOT_SUBSCRIBE_TOPIC   \"{secrets_outputs['iot_thing_name']['value']}/sub\"\n")
    f.write("\n")
    f.write("// WiFi CREDS\n")
    f.write("// -----------------------------\n")
    f.write("\n")
    f.write(f"const char WIFI_SSID[] = \"{secrets_config['wifi_ssid']}\";\n")
    f.write(f"const char WIFI_PASSWORD[] = \"{secrets_config['wifi_password']}\";\n")
    f.write(f"int8_t TIME_ZONE = {secrets_config['time_zone']};\n")
    f.write("\n")
    f.write("\n")
    f.write("// DEVICE/AWS CREDS\n")
    f.write("// -----------------------------\n")
    f.write("\n")
    f.write(f"#define THINGNAME \"{secrets_outputs['iot_thing_name']['value']}\"\n")
    f.write("\n")
    f.write(f"const char MQTT_HOST[] = \"{secrets_outputs['iot_endpoint']['value']}\";\n")
    f.write("\n")
    f.write('static const char cacert[] PROGMEM = R"EOF(\n')
    f.write(secrets_outputs['iot_root_ca_cert']['value'])
    f.write(')EOF";\n')
    f.write("\n")
    f.write('static const char client_cert[] PROGMEM = R"KEY(\n')
    f.write(secrets_outputs['iot_thing_cert']['value'])
    f.write(')KEY";\n')
    f.write("\n")
    f.write('static const char private_key[] PROGMEM = R"KEY(\n')
    f.write(secrets_outputs['iot_thing_private_key']['value'])
    f.write(')KEY";\n')
    f.write("\n")

print(f"{secrets_headers_target_path} generated successfully!")
    